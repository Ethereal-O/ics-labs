#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# name:JingKai Yang ID:520021910550
# Describe how and why you modified the baseline code.
# 1. add instruction iaddq to make two instructions to one
# 2. solve load-use hazard to decrease bubbles
# 3. make expansion to eliminate loop inefficiencies
# 4. make skiplist to solve other number
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-10,%rdx
	jl Remain		# if so, goto Remain:

Ten_expansion:	
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi),%r9	
	rmmovq %r8, (%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle Ten_notadd1		# if so, goto Npos:
	iaddq $1,%rax		# count++

Ten_notadd1:	
	mrmovq 16(%rdi),%r8
	rmmovq %r9,8(%rsi)
	andq %r9,%r9
	jle Ten_notadd2
	iaddq $1,%rax

Ten_notadd2:	
	mrmovq 24(%rdi),%r9
	rmmovq %r8,16(%rsi)
	andq %r8,%r8
	jle Ten_notadd3
	iaddq $1,%rax

Ten_notadd3:	
	mrmovq 32(%rdi),%r8
	rmmovq %r9,24(%rsi)
	andq %r9,%r9
	jle Ten_notadd4
	iaddq $1,%rax

Ten_notadd4:	
	mrmovq 40(%rdi),%r9
	rmmovq %r8,32(%rsi)
	andq %r8,%r8
	jle Ten_notadd5
	iaddq $1,%rax

Ten_notadd5:	
	mrmovq 48(%rdi),%r8
	rmmovq %r9,40(%rsi)
	andq %r9,%r9
	jle Ten_notadd6
	iaddq $1,%rax

Ten_notadd6:	
	mrmovq 56(%rdi),%r9
	rmmovq %r8,48(%rsi)
	andq %r8,%r8
	jle Ten_notadd7
	iaddq $1,%rax

Ten_notadd7:	
	mrmovq 64(%rdi),%r8
	rmmovq %r9,56(%rsi)
	andq %r9,%r9
	jle Ten_notadd8
	iaddq $1,%rax

Ten_notadd8:	
	mrmovq 72(%rdi),%r9
	rmmovq %r8,64(%rsi)
	andq %r8,%r8
	jle Ten_notadd9
	iaddq $1,%rax

Ten_notadd9: 
	rmmovq %r9,72(%rsi)
	andq %r9,%r9
	jle Ten_notadd10
	iaddq $1,%rax

Ten_notadd10:	
	iaddq $80, %rdi		# src+8
	iaddq $80, %rsi		# dst+8
	iaddq $-10,%rdx		# len > 8?
	jge Ten_expansion			# if so, goto Loop:


Remain:						
	iaddq $7,%rdx			
	jl Remain_Low			
	jg Remain_High			
	je Three				

Remain_Low:
	iaddq $2,%rdx			
	je One
	iaddq $-1,%rdx		
	je Two
	ret					

Remain_High:
	iaddq $-3,%rdx			
	jg Remain_High_High
	je Six				
	iaddq $1,%rdx
	je Five 				
	jmp Four	

Remain_High_High:
	iaddq $-2,%rdx
	jl Seven
	je Eight

Nine:
	mrmovq 64(%rdi),%r8
	andq %r8,%r8
	rmmovq %r8,64(%rsi)	

Eight:
	mrmovq 56(%rdi),%r8
	jle Eight_1
	iaddq $1,%rax
Eight_1:
	rmmovq %r8,56(%rsi)
	andq %r8,%r8

Seven:
	mrmovq 48(%rdi),%r8
	jle Seven_1
	iaddq $1,%rax
Seven_1:
	rmmovq %r8,48(%rsi)
	andq %r8,%r8

Six:
	mrmovq 40(%rdi),%r8
	jle Six_1
	iaddq $1,%rax
Six_1:
	rmmovq %r8,40(%rsi)
	andq %r8,%r8

Five:
	mrmovq 32(%rdi),%r8
	jle Five_1
	iaddq $1,%rax
Five_1:
	rmmovq %r8,32(%rsi)
	andq %r8,%r8

Four:
	mrmovq 24(%rdi),%r8
	jle Four_1
	iaddq $1,%rax
Four_1:
	rmmovq %r8,24(%rsi)
	andq %r8,%r8

Three:
	mrmovq 16(%rdi),%r8
	jle Three_1
	iaddq $1,%rax
Three_1:
	rmmovq %r8,16(%rsi)
	andq %r8,%r8

Two:
	mrmovq 8(%rdi),%r8
	jle Two_1
	iaddq $1,%rax
Two_1:
	rmmovq %r8,8(%rsi)
	andq %r8,%r8
	
One:
	mrmovq (%rdi),%r8
	jle One_1
	iaddq $1,%rax
One_1:
	rmmovq %r8,(%rsi)
	andq %r8,%r8
	jle Done
	iaddq $1,%rax


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
